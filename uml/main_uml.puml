@startuml

skinparam class {
BackgroundColor<<Main>> Snow
BorderColor<<Main>> Orange
}
skinparam stereotypeCBackgroundColor<< Main >> Khaki

class ApplicationClient<<Main>>
{
    -{static}con
    -{static}app
    -{static}Main()
    -{static}ShowSimulationMenu()
    -{static}DriveIn()
    -{static}DriveOut()
    -{static}Register()
    '-{static}IncorrectCommand()
}

class DeviceFactory<<Singleton>>
{
    -{static}instance: DeviceFactory
    +entranceDevices: List<EntranceParkingMachine>
    +exitDevices: List<ExitParkingMachine>
    +registerDevices: List<RegisterDevice>
    +{static}GetInstance(): DeviceFactory
    +Run(): void
    +GetEntranceDevices(): List
    +GetExitDevices(): List
    +GetRegisterDevices(): List
}

ApplicationClient --> DeviceFactory: init




package "DeviceInterface"{
    interface IGateAPI{
        +OpenGate()
    }

    interface IPremiumCardAPI{
        +AddPremiumCardObserver(IPremiumCard o): void
        +RemovePremiumCardObserver(IPremiumCard o): void
        +AnnounceSwipeAll(string data): void
        +AnnounceSwipe(string data,IPremiumCard o): void
    }

    interface IScannerAPI{
        +AddScannerObserver(IScannerObserver o): void
        +RemoveScannerObserver(IScannerObserver o): void
        +AnnounceScanAll(string code): void
        +AnnounceScan(string code, IScannerObserver o): void
    }

    interface IPrinterAPI{
        +PrintTicket(Ticket t)
    }

    interface ISimpleDialog{
        +ShowMessage(String msg): void
        +ReadString(): string
    }

    class ConsoleDisplay<<Singleton>> implements ISimpleDialog{
        -{static}instance: ConsoleDisplay
        +{static}GetInstance(): ConsoleDisplay
        +ShowMessage(String msg): void
        +ReadString(): string
    }

    class ConsoleMachineAPI implements  ISimpleDialog, IGateAPI, IStandardButtonsAPI, ICashMachineAPI, IPrinterAPI,IScannerAPI,IPremiumCardAPI{

    }

    Note bottom of ConsoleMachineAPI: This would be API of real\nparking machine, but instead\nit uses console via\n<b>adapter pattern

    interface IStandardButtonsAPI {
        +AddButtonObserver(ButtonKey key, IButtonObserver o): void
        +RemoveButtonObserver(ButtonKey key, IButtonObserver o): void
        +AnnounceButtonPressedAll(ButtonKey key): void
        +AnnounceButtonPressed(ButtonKey key,IButtonObserver o): void
    }
    IStandardButtonsAPI -d- ButtonKey
    IStandardButtonsAPI o--"list for each\nbutton type" IButtonObserver
    IPremiumCardAPI o-- IPremiumCardObserver
    IScannerAPI o-- IScannerObserver

    enum ButtonKey{
        ACCEPT_BUTTON
        SPECIAL_BUTTON
        CANCEL_BUTTON
    }


    interface IButtonObserver
    {
        +ButtonPressed(ButtonKey key): void
    }
    'note bottom: <b>observer\n<b>pattern

    interface IScannerObserver
    {
        +Scan(string code): void
    }

    interface IPremiumCardObserver
    {
        +CardSwiped(ButtonKey key): void
    }

    ConsoleMachineAPI o--> ConsoleDisplay
    ApplicationClient --> ISimpleDialog: use console
    ApplicationClient -> ConsoleMachineAPI: simulate usecase

    package "PaymentSystem"{
       interface ICashMachineAPI
       {
           +InsertCoin(AllowedDenominations denomination): void
           +PayByDebitCard(string debitCardData, int valuePLN, int valueGR): bool
       }

       class Denomination
       {
           -valueInGR: int
           +amount: int
       }

       interface CashChangeStrategy
       {

       }

       ICashMachineAPI o--> CashChangeStrategy
       ICashMachineAPI *-- Denomination
       Denomination . CashChangeStrategy
    }
}


package "Devices"<<logic of various devices>>{

    class Device <<Abstract>> implements IButtonObserver,IPremiumCardObserver{
        - display: ISimpleDialog
        - buttons: IStandardButtonsAPI
        - cardReader: IPremiumCardAPI

        +{abstract}Main(): void
    }

    class RegisterDevice extends Device
    {
        #DisposeChange(Denomination coins): void
    }

    class GateDevice<<Abstract>> extends Device{
        -gate: IGateAPI
        +CheckCard()
        #CloseIfClear()
    }

    class ExitParkingMachine extends GateDevice
    {
        -ticketPrinter: IPrinterAPI
    }

    class EntranceParkingMachine extends GateDevice implements IScannerObserver
    {
        -scanner: IScannerAPI
    }
}
'"Devices"->"DeviceInterface": devices are\nusing various\ninterfaces


package ParkingSystem{

    class TicketDatabase{
        -counter: int
        -maxPlaces: int
        +TryAddTicket(): void
        +EvaluateTicket(string code):
    }

    class Ticket<<immutable>>{
        -code: string
        -entranceTime: DateTime
        +Code.get(): string
        +EntanceTime.get(): DateTime
    }
    note bottom: <b>flyweight pattern



    TicketDatabase *-- Ticket


    ' ? class PremiumPlaces implements IPlaceCounter
}

package "Util"{
    interface ITicketCodeGenerator
    {
        +Generate()
    }


    class GUIDGenerator implements ITicketCodeGenerator
    {
    }
    note bottom of GUIDGenerator: <b>strategy\n<b>pattern


}

TicketDatabase --> ITicketCodeGenerator
IPremiumDatabase --> ITicketCodeGenerator

package Premium{

    interface IPremiumDatabase
    {
        +Register(String driversPlate): void
        +ExtendPremium(String driversPlate, DateTime extendTo): void
    }

    class PremiumProxy implements IPremiumDatabase{

    }
    class PremiumDatabase implements IPremiumDatabase{
    }

    PremiumDatabase *-- PremiumUser
    class PremiumUser{
        -code: string
        -expireDate: DateTime
        -licencePlate: string
    }


    PremiumProxy --> PremiumDatabase :uses
}




() " "

DeviceFactory *-- " ": contains
Devices o--> " ": uses
" " --> TicketDatabase
" " --> IPremiumDatabase
'RegisterDevice --> PremiumProxy: uses
'GateDevice --> PremiumDatabase: usu


DeviceFactory o-->"n" Device

@enduml