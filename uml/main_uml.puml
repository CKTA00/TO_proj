@startuml

class Application
{
    +run()
}



node PaymentSystem{
   class CashMachine
   {
       +enterCoin(Denomination coins)
       +acceptPayment(): void
       -disposeChange(): void
   }

   class Denomination
   {
       -valueInGR: int
       +amount: int
   }

   interface CashChangeStrategy
   {

   }
}

node GUI{
    interface IDisplay{
        +ShowMessage(String msg): void
    }

    interface IPaymentDevice{
        +disposeChange(Denomination coins): void
        -acceptButtonPressed(): void
        -cancelButtonPressed(): void
        +addObserverToButton(ButtonKey key, IGuiEventListener observer): void
    }

    enum ButtonKey{
        ACCEPT_BUTTON
        CANCEL_BUTTON
    }

    interface IGuiEventListener
    {
        -buttonPressed(): void
    }
    'note left: observer\npattern

    class TestingConsoleUI implements IDisplay,IPaymentDevice{
    }
}







CashMachine o--> CashChangeStrategy
CashMachine *-- Denomination
Denomination . CashChangeStrategy

IGuiEventListener <|-- CashMachine
CashMachine --> IPaymentDevice :uses
IPaymentDevice o--"multiple lists" IGuiEventListener

@enduml