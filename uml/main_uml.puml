@startuml

skinparam class {
BackgroundColor<<Main>> Snow
BorderColor<<Main>> Orange
}
skinparam stereotypeCBackgroundColor<< Main >> Khaki

class ApplicationClient<<Main>>
{
    -{static}con
    -{static}app
    -{static}Main()
    -{static}ShowSimulationMenu()
    -{static}DriveIn()
    -{static}DriveOut()
    -{static}Register()
    '-{static}IncorrectCommand()
}

class Application<<Singleton>>
{
    -{static}instance: Application
    +entranceDevices: List<EntranceParkingMachine>
    +exitDevices: List<ExitParkingMachine>
    +registerDevices: List<RegisterSystem>
    +{static}GetInstance(): Application
    -Init(): void
    +GetEntranceDevices(): List
    +GetExitDevices(): List
    +GetRegisterDevices(): List
}

ApplicationClient --> Application


package "Payment System"{
   interface IPaymentMachine
   {
   }

   class CashMachine implements IPaymentMachine
   {
       +EnterCoin(Denomination coins)
       +AcceptPayment(): void
       -DisposeChange(): void
   }

   class Denomination
   {
       -valueInGR: int
       +amount: int
   }

   interface CashChangeStrategy
   {

   }
}

package "User Interface"{
    interface IMachineAPI{
        +OpenGate()
        +DisplayMessageBox()
    }

    interface ISimpleDialog{
        +ShowMessage(String msg): void
        +ReadString(): string
    }

    class ConsoleDisplay<<Singleton>> implements ISimpleDialog{
        -{static}instance: ConsoleDisplay
        +{static}GetInstance(): ConsoleDisplay
        +ShowMessage(String msg): void
        +ReadString(): string
    }

    class ConsoleMachineAPI implements IMachineAPI, ISimpleDialog{

    }

    Note bottom of ConsoleMachineAPI: This would be API of real\nparking machine, but instead\nit uses console in an\n<b>adapter pattern


    ConsoleMachineAPI o-> ConsoleDisplay
    ApplicationClient --> ISimpleDialog
}


package "Devices"<<UI systems of various devices>>{


    class Device <<Abstract>>{
        -IMachineAPI: display
        +{abstract}AcceptButtonPressed(): void
        +{abstract}Main(): void
        +AddButtonObserver(ButtonKey key, IGuiEventListener observer): void
        +RemoveButtonObserver(ButtonKey key, IGuiEventListener observer): void
        #NotifyAllButtonPressed(ButtonKey key): void
    }

    'Device *-- "CashMachine?"

    class RegisterSystem extends Device
    {
        +CancelButtonPressed(): void
        +KeyboardInput(): string
    }

    class GateDevice<<Abstract>> extends Device{
        +CheckCard()
        #CloseIfClear()
    }



    enum ButtonKey{
        ACCEPT_BUTTON
        SPECIAL_BUTTON
        CANCEL_BUTTON
    }


    class ExitParkingMachine extends GateDevice
    {
        #DisposeChange(Denomination coins): void
    }

    class EntranceParkingMachine extends GateDevice
    {

    }


    interface IGuiEventListener
    {
        -ButtonPressed(): void
    }
    note left: observer pattern\n(might be removed if\ncash machine in device)


    GateDevice -->  IMachineAPI
    Device -->  ISimpleDialog
}



package ParkingSystem{

    class TicketDatabase{
        -counter: int
        -maxPlaces: int
        +TryAddTicket(): void
        +EvaluateTicket(string code):
    }

    class Ticket<<immutable>>{
        -code: string
        -entranceTime: DateTime
        +Code.get(): string
        +EntanceTime.get(): DateTime
    }
    note bottom: <b>flyweight pattern

    interface ITicketCodeGenerator
    {
        +Generate()
    }
    note right: <b>strategy\n<b>pattern

    class GUIDGenerator implements ITicketCodeGenerator

    TicketDatabase *-- Ticket
    TicketDatabase -> ITicketCodeGenerator

    ' ? class PremiumPlaces implements IPlaceCounter
}

package PremiumUser{

    interface IDriverDatabase
    {
        +Register(String driversPlate): void
    }
    class PremiumProxy implements IDriverDatabase{

    }
    class PremiumDatabase implements IDriverDatabase{
    }


    PremiumProxy --> PremiumDatabase :uses
}

CashMachine o--> CashChangeStrategy
CashMachine *-- Denomination
Denomination . CashChangeStrategy


IGuiEventListener <|.. CashMachine


Device o---"multiple lists" IGuiEventListener

GateDevice o-->"2 (normal,handicapped)" TicketDatabase: use
GateDevice <.. TicketDatabase: notifies all?
RegisterSystem --> PremiumProxy: uses
GateDevice --> PremiumDatabase: uses

TicketDatabase::evaluateTicket --> IPaymentMachine :initialize\npayment
Application o-->"n" Device

Device - ButtonKey

@enduml