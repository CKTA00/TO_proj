@startuml

skinparam class {
BackgroundColor<<Main>> Snow
BorderColor<<Main>> Orange
}
skinparam stereotypeCBackgroundColor<< Main >> Khaki

class ApplicationClient<<Main>>
{
    -{static}entranceDevices: List<EntranceParkingMachine>
    -{static}exitDevices: List<ExitParkingMachine>
    -{static}registerDevices: List<RegisterDevice>
    -{static}Main()
    -{static}ShowSimulationMenu()
    -{static}DriveIn()
    -{static}DriveOut()
    -{static}Register()
    '-{static}IncorrectCommand()
}

class DeviceFactory<<Singleton>>
{
    -{static}instance: DeviceFactory

    +dialog: ISimpleDialog
    +gate: IGateAPI
    +ticketPrinter: IPrinterAPI
    +scanner: IScannerAPI
    +cardReader: IPremiumCardAPI
    +buttons: IStandardButtonsAPI
    +cashOutput: ICashMachineOutput
    +cashMachine: ICashMachineAPI

    +normalTicketDB: ITicketDatabase
    +handicappedTicketDB: ITicketDatabase
    +premiumDatabase: IPremiumDatabase
    +{static}GetInstance(): DeviceFactory
    +Run(): void
    +BuildEntranceDevice(): EntranceParkingMachine
    +BuildExitDevices(): ExitParkingMachine
    +BuildRegisterDevices(): RegisterDevice
}

ApplicationClient --> DeviceFactory: request build




package "DeviceInterface"{
    interface IGateAPI{
        +OpenGate()
    }

    interface IPremiumCardAPI{
        +AddPremiumCardObserver(IPremiumCard o): void
        +RemovePremiumCardObserver(IPremiumCard o): void
        +AnnounceSwipeAll(string data): void
        +AnnounceSwipe(string data,IPremiumCard o): void
    }

    interface IScannerAPI{
        +AddScannerObserver(IScannerObserver o): void
        +RemoveScannerObserver(IScannerObserver o): void
        +AnnounceScanAll(string code): void
        +AnnounceScan(string code, IScannerObserver o): void
    }

    interface IPrinterAPI{
        +PrintTicket(Ticket t)
    }

    interface ICashMachineOutput{
            +ThrowCoin(AllowedDenominations den): void
            +ThrowCoins(AllowedDenominations den, int amount): void
    }

    interface ISimpleDialog{
        +ShowMessage(String msg): void
        +ReadString(): string
    }

    interface ICashMachineAPI
    {
       +AddCashMachineObserver(ICashMachineObserver o): void
       +RemoveCashMachineObserver(ICashMachineObserver o): void
       +AnnounceCoinAll(AllowedDenominations den): void
       +AnnounceSwipe(AllowedDenominations den,ICashMachineObserver o): void
    }

    class ConsoleDisplay<<Singleton>> implements ISimpleDialog{
        -{static}instance: ConsoleDisplay
        +{static}GetInstance(): ConsoleDisplay
        +ShowMessage(String msg): void
        +ReadString(): string
    }

    class ConsoleMachineAPI implements  ISimpleDialog, IGateAPI, IStandardButtonsAPI, ICashMachineAPI, IPrinterAPI,IScannerAPI,IPremiumCardAPI, ICashMachineOutput{

    }

    Note bottom of ConsoleMachineAPI: This would be API of real\nparking machine, but instead\nit uses console via\n<b>adapter pattern

    interface IStandardButtonsAPI {
        +AddButtonObserver(ButtonKey key, IButtonObserver o): void
        +RemoveButtonObserver(ButtonKey key, IButtonObserver o): void
        +AnnounceButtonPressedAll(ButtonKey key): void
        +AnnounceButtonPressed(ButtonKey key,IButtonObserver o): void
    }
    IStandardButtonsAPI -d- ButtonKey
    IStandardButtonsAPI o--"list for each\nbutton type" IButtonObserver
    IPremiumCardAPI o-- IPremiumCardObserver
    IScannerAPI o-- IScannerObserver
    ICashMachineAPI o-- ICashMachineObserver

    enum ButtonKey{
        ACCEPT_BUTTON
        SPECIAL_BUTTON
        CANCEL_BUTTON
    }


    interface IButtonObserver
    {
        +ButtonPressed(ButtonKey key): void
    }
    'note bottom: <b>observer\n<b>pattern

    interface IScannerObserver
    {
        +Scan(string code): void
    }

    interface IPremiumCardObserver
    {
        +CardSwiped(ButtonKey key): void
    }

    interface ICashMachineObserver
    {
        +InsertCoin(AllowedDenominations denomination): void
    }

    ConsoleMachineAPI o--> ConsoleDisplay
    ApplicationClient --> ISimpleDialog: use console
    ApplicationClient -> ConsoleMachineAPI: simulate usecase
}

package "CashSystem"{
    enum AllowedDenominations{
        M10gr = 10,
        M20gr = 20,
        M50gr = 50,
        M1pln = 100,
        M2pln = 200,
        M5pln = 500
    }

    interface IPriceStrategy{
        +CalculatePriceInGr(TimeSpan t): int
    }

    class PremiumPrices implements IPriceStrategy
    {

    }

    class TicketPrices implements IPriceStrategy
    {

    }

}

() "2"
"2" --> IPriceStrategy


package "Devices"<<logic of various devices>>{

    class Device <<Abstract>> implements IButtonObserver,IPremiumCardObserver{
        #display: ISimpleDialog
        #handicappedTicketsDB: ITicketDatabase
        #premiumDB: IPremiumDatabase

        +{abstract}Main(): void
    }

    class RegisterDevice extends Device implements IPaymentDone
    {
        -currentTicket: Ticket
        -currentUser: PremiumUser
        -bank: CoinContainer
        -ticketPrice: IPriceStrategy
        -premiumPrice: IPriceStrategy
        -login: string
        -transaction: bool
        -userRegister: bool
        -handicapped: bool
        -extend: int

        +Bank(): CoinContainer
        -EndTransaction(): void
        -RegisterNewUser(): void
    }

    RegisterDevice *-- "2"

    class GateDevice<<Abstract>> extends Device{
        #gate: IGateAPI
    }

    class ExitParkingMachine extends GateDevice  implements IScannerObserver
    {

    }

    class EntranceParkingMachine extends GateDevice
    {
        -ticketPrinter: IPrinterAPI;
        -handicapPremiumNormalTicket: bool
        -tempUser: PremiumUser
        -AcceptButtonPressed(): void
        -AddVirtualTicket(Ticket virtualTicket, PremiumUser user): void
        -HandicapPremiumNormalTicket(): void
        -SpecialButtonPressed(): void
    }

    interface IPaymentDone{
        +PaymentDone(): void
    }

    class CoinContainer implements ICashMachineObserver
    {
        -display: ISimpleDialog
        -ctx: IPaymentDone
        -cashOutput: ICashMachineOutput
        -coins: Dictionary<AllowedDenominations, int>
        -box: Dictionary<AllowedDenominations, int>
        -closeBox: bool
        total: int
        +SetContext(IPaymentDone ctx, ISimpleDialog display)
        +RequestValue(int totalInGr): void
        +CancelPayment(): void
        -Eval(): void
        -Rest(int value): void
    }

    RegisterDevice *-->"1" CoinContainer
}
'"Devices"->"DeviceInterface": devices are\nusing various\ninterfaces


package ParkingSystem{

    interface ITicketDatabase{
        -counter: int
        -maxPlaces: int
        +TryAddTicket(): void
        +EvaluateTicket(string code):
    }

    class TicketDatabase implements ITicketDatabase{
    }


    class Ticket{
        -code: string
        -entranceTime: DateTime
        -paymentTime: DateTime
        -isPaid: bool
        +Code.get(): string
        +EntranceTime.get(): DateTime
        +Realize(): void
        +Underpaid(): void
        +IsPaid(): bool
    }



    ITicketDatabase *--"n" Ticket


    ' ? class PremiumPlaces implements IPlaceCounter
}

package "Util"{
    interface ITicketCodeGenerator
    {
        +Generate()
    }


    class GUIDGenerator implements ITicketCodeGenerator
    {
    }
    note bottom of GUIDGenerator: <b>strategy\n<b>pattern


}

ITicketDatabase o--> ITicketCodeGenerator


package Premium{


    interface IPremiumDatabase{
        -premiumUsers: Dictionary<string, PremiumUser>
        +RegisterPremiumUser(string plateNumber): PremiumUser
        +GetPremiumUser(string plateNumber, string code): PremiumUser
        +FindUserByCode(string code): PremiumUser

    }

    class PremiumDatabase implements IPremiumDatabase

    IPremiumDatabase *--"n"PremiumUser
    class PremiumUser{
        -code: string
        -expireDate: DateTime
        -currentTicketCode: string
        +registrationPlate: string
        +isHandicapped: bool
        +AddTicket(Ticket ticket): void
        +RemoveTicket(): string
        +Extend(TimeSpan time): void
    }

    IPremiumDatabase o--> ITicketCodeGenerator
}




() " "

DeviceFactory ..> " ": creates
Devices o--> " ": uses
" " --> ITicketDatabase
" " --> IPremiumDatabase
'RegisterDevice --> PremiumProxy: uses
'GateDevice --> PremiumDatabase: usu


DeviceFactory ..>"creates" Device

@enduml